openapi: 3.0.3

info:
  title: ITcom trainings API
  version: 0.0.1
  contact:
    name: Matteo Carbone
    email: email@matteocarbone.com
    url: https://matteocarbone.com

servers:
  - url: https://api.itcom-trainings.link/{environment}
    variables:
      environment:
        enum: [cyan, darkblue, green, orange, pink, black, white, dev, prod]
        default: dev
        description: The API stage

externalDocs:
  description: Models documentation
  url: https://github.com/uatisdeproblem/itcom-trainings/tree/main/back-end/src/models

tags:
  - name: Login
    description: Access the platform
  - name: Configurations
    description: The platfrom's configurations
  - name: Communications
    description: The platform's communications
  - name: Sessions
    description: The platform's sessions
  - name: Checklist
    description: The platform's event checklist

paths:
  /login:
    get:
      summary: Manage the login accepted request from ESN Accounts and prepare a token to authenticate the user
      description: Acquire the CAS ticket, validate it, create the user (if necessary) and return a token.
      tags: [Login]
      parameters:
        - name: ticket
          in: query
          description: The CAS ticket of successful login with ESN Accounts
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'

  /media:
    post:
      summary: Get a signed URL to upload a new image
      tags: [Configurations]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
  /communications:
    get:
      summary: Get the communications
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: year
          in: query
          description: Get the communications of this year; if not specified, only unarchived ones are returned
          schema:
            type: number
      responses:
        200:
          $ref: '#/components/responses/Communications'
    post:
      summary: Insert a new communication
      tags: [Communications]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Communication'
      responses:
        200:
          $ref: '#/components/responses/Communication'
        400:
          $ref: '#/components/responses/BadParameters'
  /communications/{communicationId}:
    get:
      summary: Get a communication
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          description: Communication ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Communication'
    put:
      summary: Edit a communication
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          description: Communication ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Communication'
      responses:
        200:
          $ref: '#/components/responses/Communication'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a communication
      tags: [Communications]
      security:
        - AuthFunction: []
      parameters:
        - name: communicationId
          in: path
          description: Communication ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /speakers:
    get:
      summary: Get the speakers
      tags: [Speakers]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Speakers'
    post:
      summary: Insert a new speaker
      tags: [Speakers]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Speaker'
      responses:
        200:
          $ref: '#/components/responses/Speaker'
        400:
          $ref: '#/components/responses/BadParameters'
  /speaker/{speakerId}:
    get:
      summary: Get a speaker
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: speakerId
          in: path
          description: Speaker ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Speaker'
    put:
      summary: Edit a speaker
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: speakerId
          in: path
          description: Speaker ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Speaker'
      responses:
        200:
          $ref: '#/components/responses/Speaker'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a speaker
      tags: [Speakers]
      security:
        - AuthFunction: []
      parameters:
        - name: speakerId
          in: path
          description: Speaker ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /sessions:
    get:
      summary: Get the sessions
      tags: [Sessions]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Sessions'
    post:
      summary: Insert a new session
      tags: [Sessions]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        200:
          $ref: '#/components/responses/Session'
        400:
          $ref: '#/components/responses/BadParameters'
  /sessions/{sessionId}:
    get:
      summary: Get a session
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/Session'
    put:
      summary: Edit a session
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
      responses:
        200:
          $ref: '#/components/responses/Session'
        400:
          $ref: '#/components/responses/BadParameters'
    patch:
      summary: Actions on a session
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [REGISTER, CANCEL_REGISTRATION]
      responses:
        200:
          $ref: '#/components/responses/Session'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Delete a session
      tags: [Sessions]
      security:
        - AuthFunction: []
      parameters:
        - name: sessionId
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
  /checklist:
    get:
      summary: Get the elements of the checklist checked by the user
      tags: [Checklist]
      security:
        - AuthFunction: []
      responses:
        200:
          $ref: '#/components/responses/Checklist'
    post:
      summary: Check the element of the checklist for the user
      tags: [Checklist]
      security:
        - AuthFunction: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Checklist'
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'
    delete:
      summary: Uncheck the element of the checklist for the user
      tags: [Checklist]
      security:
        - AuthFunction: []
      parameters:
        - name: checkName
          in: query
          description: The name of the element to uncheck
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/OperationCompleted'
        400:
          $ref: '#/components/responses/BadParameters'

components:
  schemas:
    Communication:
      type: object
      additionalProperties: {}
    Checklist:
      type: object
      additionalProperties: {}
    Session:
      type: object
      additionalProperties: {}
    Speaker:
      type: object
      additionalProperties: {}

  responses:
    Communication:
      description: A communication
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Communication'
    Communications:
      description: The communications
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Communication'
    Speaker:
      description: A speaker
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Speaker'
    Speakers:
      description: The speakers
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Speaker'
    Session:
      description: A session
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Session'
    Sessions:
      description: The sessions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Session'
    Checklist:
      description: The checklist
      content:
        application/json:
          schema:
            type: object
            $ref: '#/components/schemas/Checklist'
    BadParameters:
      description: Bad input parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: The request isn't valid
    OperationCompleted:
      description: Operation completed

  securitySchemes:
    AuthFunction:
      type: apiKey
      name: Authorization
      in: header
